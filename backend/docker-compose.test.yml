services:
  # --- Auth Service Unit ---
  test-auth-unit:
    profiles: ["unit"]
    image: golang:1.25.1-alpine
    working_dir: /app
    volumes:
      - ./auth-service:/app
    command: >
      sh -c "
        go test ./tests/unit/... -v
      "
    environment:
      JWT_SECRET: testsecret

  # --- Auth Service Integration ---
  test-auth-int:
    profiles: ["integration"]
    image: golang:1.25.1-alpine
    working_dir: /app
    volumes:
      - ./auth-service:/app
      - ./shared:/app/../shared
    depends_on:
      - auth-db
      - redis
    command: >
      sh -c "
        apk add --no-cache postgresql-client &&
        until pg_isready -h auth-db -p 5432 -U auth -d auth_db; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        for f in ./migrations/*.sql; do
          psql $${DATABASE_URL} -f $$f;
        done &&
        go test ./tests/integration/... -tags=integration -v
      "
    environment:
      DATABASE_URL: postgres://auth:password@auth-db:5432/auth_db?sslmode=disable
      JWT_SECRET: testsecret
      REDIS_ADDR: redis:6379

  auth-db:
    image: postgres:15
    environment:
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Feedback Service Unit ---
  test-feedback-unit:
    profiles: ["unit"]
    image: golang:1.25.1-alpine
    working_dir: /app
    volumes:
      - ./feedback-service:/app
    command: >
      sh -c "
        go test ./tests/unit/... -v
      "

  # --- Feedback Service Integration ---
  test-feedback-int:
    profiles: ["integration"]
    image: golang:1.25.1-alpine
    working_dir: /app
    volumes:
      - ./feedback-service:/app
      - ./shared:/app/../shared
    depends_on:
      - feedback-db
    command: >
      sh -c "
        apk add --no-cache postgresql-client &&
        until pg_isready -h feedback-db -p 5432 -U feedback -d feedback_db; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        for f in ./migrations/*.sql; do
          psql $${DATABASE_URL} -f $$f;
        done &&
        go test ./tests/integration/... -tags=integration -v
      "
      
    environment:
      DATABASE_URL: postgres://feedback:password@feedback-db:5432/feedback_db?sslmode=disable
      JWT_SECRET: testsecret

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  feedback-db:
    image: postgres:15
    environment:
      POSTGRES_USER: feedback
      POSTGRES_PASSWORD: password
      POSTGRES_DB: feedback_db
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U feedback -d feedback_db"]
      interval: 10s
      timeout: 5s
      retries: 5
